#include <iostream>
#include <vector>
using namespace std;
void swap(int *a, int *b) {
  int temp=*b;
  *b=*a;
  *a=temp;
}
void heapify(vector<int> &z, int i) {
  int size=z.size();
  int large=i;
  int l=2*i+1;
  int r=2*i+2;
  if (l<size && z[l]>z[large])
    large=l;
  if (r<size&&z[r]>z[large])
    large=r;
  if (large!=i) {
    swap(&z[i], &z[large]);
    heapify(z, large);
  }
}
void insert(vector<int> &z, int newNumber) {
  int size=z.size();
  if (size==0) {
    z.push_back(newNumber);
  } 
  else {
    z.push_back(newNumber);
    for (int i=size/2-1; i>=0; i--) {
      heapify(z, i);
    }
  }
}
void deleteNode(vector<int> &z, int number) {
  int size=z.size();
  int i;
  for (i=0; i<size; i++) {
    if (number==z[i])
      break;
  }
  swap(&z[i], &z[size-1]);
  z.pop_back();
  for (int i=size/2-1; i>=0; i--) {
    heapify(z, i);
  }
}
void printArray(vector<int> &z) {
  for (int i=0; i<z.size(); ++i)
    cout<<z[i]<<" ";
  cout<<"\n";
}
int main() {
  vector<int> heapTree;
  insert(heapTree, 3);
  insert(heapTree, 4);
  insert(heapTree, 9);
  insert(heapTree, 5);
  insert(heapTree, 2);
  cout<<"Массив max-heap: ";
  printArray(heapTree);
  deleteNode(heapTree, 4);
  cout<<"После удаления элемента: ";
  printArray(heapTree);
}
