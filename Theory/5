#include <iostream>
#include <vector>
using namespace std;
struct Node {
	int data;
	Node* right;
	Node* left;
};
class search_tree {
	Node* root;
public:
	search_tree(int x) {
		root->data=x;
	}
	void add(int x) {
		Node* new_element;
		new_element->data=x;
		Node* ptr=root;
		int h=0;
		while (h!=1) {
			if (x<ptr->data) {
				if (ptr->left!=nullptr) {
					ptr=ptr->left;
				}
				else {
					ptr->left=new_element;
					h=1;
				}
			}
			else {
				if (ptr->right!=nullptr) {
					ptr=ptr->right;
				}
				else {
					ptr->right=new_element;
				}
			}

		}
	}
	
    void delete_tree(Node* ptr) {
		delete& ptr->data;
		if (ptr->left!=nullptr) {
			delete_tree(ptr->left);
		}
		if (ptr->right!=nullptr) {
			delete_tree(ptr->right);
		}
		delete ptr;
    }
	~search_tree() {
		delete_tree(root);
	}
	bool search(int x) {
		Node* ptr=root;
		while (1==1) {
			if (x==ptr->data) {
				return 1;
			}
			else if (x<ptr->data) {
				if (ptr->left!=nullptr) {
					ptr=ptr->left;
				}
				else {
					return 0;
				}
	
			}
			else {
				if (ptr->right!=nullptr) {
					ptr=ptr->right;
				}
				else {
					return 0;
				}
				
			}

		}
	}
	void f_print(Node* ptr) {
		if (ptr->left!=nullptr) {
			f_print(ptr->left);
		}
		cout<<ptr->data;
		if (ptr->right!=nullptr) {
			f_print(ptr->right);
		}
	}
	void f_print_sorted() {
		f_print(root);
	}
	void f_print_raw() {
		vector <Node*> V;
		vector <Node*> t;
		int k;
		V.push_back(root);
		while (V.size()!=0) {
			k=V.size();
			for (int i=0; i<k; i++) {
				cout<<V[i]->left->data<<V[i]->right->data;
				t.push_back(V[i]->left);
				t.push_back(V[i]->right);
			}
			V.clear();
			V=t;
			t.clear();
		}
		vector <Node*> m=V;
		V.swap(t);
		vector <Node*> m1=t;
		t.swap(m1);
	}
};
