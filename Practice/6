#include <iostream>
#include <typeinfo>
using namespace std;
template <typename X, typename Y>
class Pair{
    X first;
    Y second;
public:
    Pair(X x, Y y) {
       first=x;
       second=y;
    }
    ~Pair() {
        delete& first;
        delete& second;
    }
    Pair(const Pair& P) {
        first=P.first;
        second=P.second;
    }
    Pair operator=(const Pair& P){
        if (first) {
            delete first;
        }
        first=P.first;
        if (second){
            delete second;
        }
        second=P.second;
        return *this;
    }
    Pair operator+=(Pair& P) {
        first+=P.first;
        second+=P.second;
        return *this;
    }
    Pair operator*(Pair& P) {
        first*=P.first;
        first*=P.second;
        return *this;
    }
    friend ostream& operator<<(ostream& P, Pair K){
        return P<<K.first<<" "<<K.second;
    }
    friend istream& operator>>(istream& P, Pair K){
        return P>>K.first>>" ">>K.second;
    }
};
int main() {
    Pair <int, float> P(7, 3.0);
    Pair <int, float> K(6, 8.2);
    P+=K;
    cout<<P<<K;
    return 0;
}
